df_trellis <- data.frame(Borough,Complaint,Year,Number)
dotplot(
Number ~ Year |
Complaint,data = df_trellis,group = Borough,pch = rep(16,5),cex = 1,alpha =0.8, col = c('green','red','blue','pink','yellow'),
layout =c(4,1),
main = list(
'Trend of Different Complaint Numbers \n in Five Boroughs from 2004 to 2015',cex = 1.3, font = 2
),
xlab = list(
"Year",space = "top",cex = 1,font = 2
),
ylab = list("Complaint Number", cex = 1.2,font = 2),
key = list(
space = 'right',points = list(
pch = rep(16,5),cex = 1.3,col = c('green','red','blue','pink','yellow')
),text = list(c("BRONX","BROOKLYN","MANHATTAN","QUEENS","STATEN ISLAND"))
)
)
year = rep(0,n)
for (i in 1:n){
if (flag2016[i]==TRUE) {year[i] = 2016}
if (flag2015[i]==TRUE) {year[i] = 2015}
if (flag2014[i]==TRUE) {year[i] = 2014}
if (flag2013[i]==TRUE) {year[i] = 2013}
if (flag2012[i]==TRUE) {year[i] = 2012}
if (flag2011[i]==TRUE) {year[i] = 2011}
if (flag2010[i]==TRUE) {year[i] = 2010}
if (flag2009[i]==TRUE) {year[i] = 2009}
if (flag2008[i]==TRUE) {year[i] = 2008}
if (flag2007[i]==TRUE) {year[i] = 2007}
if (flag2006[i]==TRUE) {year[i] = 2006}
if (flag2005[i]==TRUE) {year[i] = 2005}
if (flag2004[i]==TRUE) {year[i] = 2004}
}
df2004 = df_all[flag2004,]
Borough_list <- sort(unique(df2004$Borough))[1:5]
Borough <- rep(rep(Borough_list,each = 4),12)
Year_list <- c('2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015')
Year <- rep(Year_list,each = 20)
Complaint_list <-sort(unique(df_all$`Complaint.Type`))[c(2,5,6,7)]
Complaint<- rep(Complaint_list,60)
Number <- rep(0,240)
for (i in 1:n){
complaint_ind <- match(df_all$Complaint.Type[i],Complaint_list)
borough_ind <- match(df_all$Borough[i],Borough_list)
year_ind <- match(year[i],Year_list)
if (!(is.na(complaint_ind)) && !(is.na(borough_ind)) && !(is.na(year_ind))){
Number[(year_ind-1)*20 + (borough_ind-1)*4 + complaint_ind] = Number[(year_ind-1)*20 + (borough_ind-1)*4 + complaint_ind] +1
}
}
df_trellis <- data.frame(Borough,Complaint,Year,Number)
dotplot(
Number ~ Year |
Complaint,data = df_trellis,group = Borough,pch = rep(16,5),cex = 1,alpha =0.8, col = c('green','red','blue','pink','yellow'),
layout =c(1,1),
main = list(
'Trend of Different Complaint Numbers \n in Five Boroughs from 2004 to 2015',cex = 1.3, font = 2
),
xlab = list(
"Year",space = "top",cex = 1,font = 2
),
ylab = list("Complaint Number", cex = 1.2,font = 2),
key = list(
space = 'right',points = list(
pch = rep(16,5),cex = 1.3,col = c('green','red','blue','pink','yellow')
),text = list(c("BRONX","BROOKLYN","MANHATTAN","QUEENS","STATEN ISLAND"))
)
)
unique(df_all$Complaint.Type)
df_all<-read.csv(file="The311.csv", as.is = TRUE)
colnames(df_all)
#check all Complaint.Types
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
#Finally we only choose the following seven types:
#Dirty Conditions, Drinking, Homeless Encampment,
#Indoor Air Quality, Mold, Water Quality, Urinating in Public
df_all<-df_all[df_all$Complaint.Type%in%c("Dirty Conditions","Drinking","Homeless Encampment","Indoor Air Quality","Mold","Urinating in Public","Water Quality"),]
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
data_sk<-data.frame(df_all$Complaint.Type,df_all$Agency,df_all$Borough)
colnames(data_sk) <- c("Complaint.Type","Agency","Borough")
unique(data_sk$Agency)
#remove 3-1-1 agency
data_sk<-data_sk[!(data_sk$Agency == "3-1-1"),]
unique(data_sk$Borough)
#remove unspecified Borough
data_sk<-data_sk[!(data_sk$Borough == "Unspecified"),]
df <- data_sk %>%
group_by(Complaint.Type, Agency, Borough) %>%
summarise(Complaint.Number = n()) %>%
select(Complaint.Type, Agency, Borough, Complaint.Number)
df <- data.frame(df)
origin <- df[,c(1,2,4)]
origin <- rename(origin, origin=Complaint.Type, visit=Agency)
visit <- df[, c(2,3,4)]
visit <- rename(visit, origin=Agency, visit=Borough)
df1 <- rbind(origin, visit)
m=gvisSankey(df1, from="origin",
to="visit", weight="Complaint.Number",
options=list(
height=600, width=1000,
sankey="{link: {colorMode: 'gradient' },
node: { width: 12,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 15,
color: '#871b47',
bold: true } }}"))
plot(m)
```{r libraries}
library(data.table)
library(dplyr)
library(ggplot2)
library(lubridate)
library(XML)
library(RJSONIO)
library(igraph)
library(googleVis)
library("stringr")
library(ggmap)
library(wordcloud)
library(RColorBrewer)
library(leaflet)
library(scales)
library(lattice)
library(maps)
library(maptools)
library(sp)
library(rgeos)
library(googleVis)
require(igraph)
require(googleVis)
library(corrplot)
library(FSAdata)
library(plotrix)
library(withr)
library(devtools)
#install_github('arilamstein/choroplethrZip@v1.3.0')
library(choroplethrZip)
```
```{r,include=FALSE}
df_all<-read.csv(file="The311.csv", header = TRUE)
colnames(df_all)
#check all Complaint.Types
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
#Finally we only choose the following seven types:
#Dirty Conditions, Drinking, Homeless Encampment,
#Indoor Air Quality, Mold, Water Quality, Urinating in Public
df_all<-df_all[df_all$Complaint.Type%in%c("Dirty Conditions","Drinking","Homeless Encampment","Indoor Air Quality","Mold","Urinating in Public","Water Quality"),]
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
data_sk<-data.frame(df_all$Complaint.Type,df_all$Agency,df_all$Borough)
colnames(data_sk) <- c("Complaint.Type","Agency","Borough")
unique(data_sk$Agency)
#remove 3-1-1 agency
data_sk<-data_sk[!(data_sk$Agency == "3-1-1"),]
unique(data_sk$Borough)
#remove unspecified Borough
data_sk<-data_sk[!(data_sk$Borough == "Unspecified"),]
df <- data_sk %>%
group_by(Complaint.Type, Agency, Borough) %>%
summarise(Complaint.Number = n()) %>%
select(Complaint.Type, Agency, Borough, Complaint.Number)
df <- data.frame(df)
origin <- df[,c(1,2,4)]
origin <- rename(origin, origin=Complaint.Type, visit=Agency)
visit <- df[, c(2,3,4)]
visit <- rename(visit, origin=Agency, visit=Borough)
df1 <- rbind(origin, visit)
m <- gvisSankey(df1, from="origin",
to="visit", weight="Complaint.Number",
options=list(
height=600, width=1000,
sankey="{link: {colorMode: 'gradient' },
node: { width: 12,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 15,
color: '#871b47',
bold: true } }}"))
```
```{r}
library(googleVis)
op <- options(gvis.plot.tag="chart")
```
```{r results='asis', tidy=TRUE,fig.width=9, fig.height=8}
plo
plot(m)
plot(mad())
plot(m)
```{r,include=FALSE}
df_all<-read.csv(file="The311.csv", header = TRUE)
colnames(df_all)
#check all Complaint.Types
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
#Finally we only choose the following seven types:
#Dirty Conditions, Drinking, Homeless Encampment,
#Indoor Air Quality, Mold, Water Quality, Urinating in Public
df_all<-df_all[df_all$Complaint.Type%in%c("Dirty Conditions","Drinking","Homeless Encampment","Indoor Air Quality","Mold","Urinating in Public","Water Quality"),]
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
data_sk<-data.frame(df_all$Complaint.Type,df_all$Agency,df_all$Borough)
colnames(data_sk) <- c("Complaint.Type","Agency","Borough")
unique(data_sk$Agency)
#remove 3-1-1 agency
data_sk<-data_sk[!(data_sk$Agency == "3-1-1"),]
unique(data_sk$Borough)
#remove unspecified Borough
data_sk<-data_sk[!(data_sk$Borough == "Unspecified"),]
df <- data_sk %>%
group_by(Complaint.Type, Agency, Borough) %>%
summarise(Complaint.Number = n()) %>%
select(Complaint.Type, Agency, Borough, Complaint.Number)
df <- data.frame(df)
origin <- df[,c(1,2,4)]
origin <- rename(origin, origin=Complaint.Type, visit=Agency)
visit <- df[, c(2,3,4)]
visit <- rename(visit, origin=Agency, visit=Borough)
df1 <- rbind(origin, visit)
m <- gvisSankey(df1, from="origin",
to="visit", weight="Complaint.Number",
options=list(
height=600, width=1000,
sankey="{link: {colorMode: 'gradient' },
node: { width: 12,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 15,
color: '#871b47',
bold: true } }}"))
```
# Chunk 1: global_options
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
# Chunk 2: libraries
library(data.table)
library(dplyr)
library(ggplot2)
library(lubridate)
library(XML)
library(RJSONIO)
library(igraph)
library(googleVis)
library("stringr")
library(ggmap)
library(wordcloud)
library(RColorBrewer)
library(leaflet)
library(scales)
library(lattice)
library(maps)
library(maptools)
library(sp)
library(rgeos)
library(googleVis)
require(igraph)
require(googleVis)
library(corrplot)
library(FSAdata)
library(plotrix)
library(withr)
library(devtools)
#install_github('arilamstein/choroplethrZip@v1.3.0')
library(choroplethrZip)
# Chunk 3
df_all<-read.csv(file="The311.csv", header = TRUE)
colnames(df_all)
#check all Complaint.Types
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
#Finally we only choose the following seven types:
#Dirty Conditions, Drinking, Homeless Encampment,
#Indoor Air Quality, Mold, Water Quality, Urinating in Public
df_all<-df_all[df_all$Complaint.Type%in%c("Dirty Conditions","Drinking","Homeless Encampment","Indoor Air Quality","Mold","Urinating in Public","Water Quality"),]
sort(unique(df_all$`Complaint.Type`))
sort(unique(df_all$Agency))
data_sk<-data.frame(df_all$Complaint.Type,df_all$Agency,df_all$Borough)
colnames(data_sk) <- c("Complaint.Type","Agency","Borough")
unique(data_sk$Agency)
#remove 3-1-1 agency
data_sk<-data_sk[!(data_sk$Agency == "3-1-1"),]
unique(data_sk$Borough)
#remove unspecified Borough
data_sk<-data_sk[!(data_sk$Borough == "Unspecified"),]
df <- data_sk %>%
group_by(Complaint.Type, Agency, Borough) %>%
summarise(Complaint.Number = n()) %>%
select(Complaint.Type, Agency, Borough, Complaint.Number)
df <- data.frame(df)
origin <- df[,c(1,2,4)]
origin <- rename(origin, origin=Complaint.Type, visit=Agency)
visit <- df[, c(2,3,4)]
visit <- rename(visit, origin=Agency, visit=Borough)
df1 <- rbind(origin, visit)
m <- gvisSankey(df1, from="origin",
to="visit", weight="Complaint.Number",
options=list(
height=600, width=1000,
sankey="{link: {colorMode: 'gradient' },
node: { width: 12,
color: { fill: '#a61d4c' },
label: { fontName: 'Times-Roman',
fontSize: 15,
color: '#871b47',
bold: true } }}"))
# Chunk 4
library(googleVis)
op <- options(gvis.plot.tag="chart")
# Chunk 5
plot(m)
# Chunk 6: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 7: cars
summary(cars)
# Chunk 8: pressure
plot(pressure)
setwd("C:/Courseworks/STATW4701/Assignments/HW4/data")
paneldata <- read.csv("Housing_and_Income.csv")
Weight <- read.csv("weights3.csv", header = TRUE)
poptable<-gvistable(Weight,options=list(page="enable"))
library(googleVis)
poptable<-gvistable(Weight,options=list(page="enable"))
poptable<-gvisTable(Weight,options=list(page="enable"))
plot(poptable)
library(googleVis)
Weight <- read.csv("weights3.csv", header = TRUE)
poptable<-gvisTable(Weight,options=list(page="enable"))
plot(poptable)
View(Weight)
Weight<- fread("weights3.csv", header = TRUE)
View(Weight)
Weight<-as.data.frame(Weight)
View(Weight)
Weight<- fread("weights3.csv", header = TRUE)
class(Weight)
Weight<-order(Weight$zip)
Weight<- fread("weights3.csv", header = TRUE)
Weight<-Weight[order(Weight$zip),]
View(Weight)
Weight_10025_new
Weight <- fread("weights3.csv", header = TRUE)
Weight_train <- fread("weights.csv", header = TRUE)
Weight_10025_new <- Weight[Weight$zip == 10025,]
Weight_10025_new
Weight <- fread("weights3.csv", header = TRUE)
Weight_train <- fread("weights.csv", header = TRUE)
Weight_10025 <- Weight_train[Weight_train$zip == 10025,]
Weight_10025_new <- Weight[Weight$zip == 10025,]
Weight_10025_new
Weight_10025.T <- t(Weight_10025[,2:ncol(Weight_10025)])
Weight_10025.T[1:10]
year <- array(1:10)
Weight_10025_result <- loess(Weight_10025.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
predict(Weight_10025_result, data.frame(year = seq(11, 12, 1)))
Weight <- read.csv("weights3.csv", header = TRUE)
Weight_train <- read.csv("weights.csv", header = TRUE)
Weight_10025 <- Weight_train[Weight_train$zip == 10025,]
Weight_10025_new <- Weight[Weight$zip == 10025,]
Weight_10025_new
Weight_10025.T <- t(Weight_10025[,2:ncol(Weight_10025)])
Weight_10025.T[1:10]
year <- array(1:10)
Weight_10025_result <- loess(Weight_10025.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
predict(Weight_10025_result, data.frame(year = seq(11, 12, 1)))
Weight_new<-rbind(Weight_10015_new,Weight_11211_new,Weight_10027_new,Weight_10021_new,
Weight_10003_new,Weight_10024_new)
Weight_new<-rbind(Weight_10025_new,Weight_11211_new,Weight_10027_new,Weight_10021_new,
Weight_10003_new,Weight_10024_new)
Weight_10027_new
Weight_10027 <- Weight_train[Weight_train$zip == 10027,]
Weight_10027
Weight_10027.T <- t(Weight_10027[,2:ncol(Weight_10027)])
Weight_10027_result <- loess(Weight_10027.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
predict(Weight_10027_result, data.frame(year = seq(11, 12, 1)))
Weight_10027_new <- Weight[Weight$zip == 10027,]
Weight_10027_new
Weight_10024 <- Weight_train[Weight_train$zip == 10024,]
Weight_10024
Weight_10024.T <- t(Weight_10024[,2:ncol(Weight_10024)])
Weight_10024_result <- loess(Weight_10024.T[1:10] ~ year, span = 0.8,  control = loess.control(surface = "direct"))
predict(Weight_10024_result, data.frame(year = seq(11, 12, 1)))
Weight_10024_new <- Weight[Weight$zip == 10024,]
Weight_10024_new
Weight_new<-rbind(Weight_10025_new,Weight_11211_new,Weight_10027_new,Weight_10021_new,
Weight_10003_new,Weight_10024_new)
Weight_10021 <- Weight_train[Weight_train$zip == 10021,]
Weight_10021
Weight_10021.T <- t(Weight_10021[,2:ncol(Weight_10021)])
Weight_10021_result <- loess(Weight_10021.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
predict(Weight_10021_result, data.frame(year = seq(11, 12, 1)))
Weight_10021_new <- Weight[Weight$zip == 10021,]
Weight_10021_new
Weight_10003 <- Weight_train[Weight_train$zip == 10003,]
Weight_10003
Weight_10003.T <- t(Weight_10003[,2:ncol(Weight_10003)])
Weight_10003_result <- loess(Weight_10003.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
predict(Weight_10003_result, data.frame(year = seq(11, 12, 1)))
Weight_10003_new <- Weight[Weight$zip == 10003,]
Weight_10003_new
Weight_11211 <- Weight_train[Weight_train$zip == 11211,]
Weight_11211
Weight_11211.T <- t(Weight_11211[,2:ncol(Weight_11211)])
Weight_11211_result <- loess(Weight_11211.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
Weight_11211_new <- Weight[Weight$zip == 11211,]
Weight_11211_new
predict(Weight_11211_result, data.frame(year = seq(11, 12, 1)))
Weight_new<-rbind(Weight_10025_new,Weight_11211_new,Weight_10027_new,Weight_10021_new,
Weight_10003_new,Weight_10024_new)
View(Weight_new)
Weight_10025 <- Weight_train[Weight_train$zip == 10025,]
Weight_10025_new <- Weight[Weight$zip == 10025,]
Weight_10025_new
Weight_10025.T <- t(Weight_10025[,2:ncol(Weight_10025)])
Weight_10025.T[1:10]
year <- array(1:10)
Weight_10025_result <- loess(Weight_10025.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
P10025<-predict(Weight_10025_result, data.frame(year = seq(11, 12, 1)))
##############################
#11211: Williamsburg
Weight_11211 <- Weight_train[Weight_train$zip == 11211,]
Weight_11211
Weight_11211.T <- t(Weight_11211[,2:ncol(Weight_11211)])
Weight_11211_result <- loess(Weight_11211.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
Weight_11211_new <- Weight[Weight$zip == 11211,]
Weight_11211_new
P11211<-predict(Weight_11211_result, data.frame(year = seq(11, 12, 1)))
##############################
#10003: lower east side
Weight_10003 <- Weight_train[Weight_train$zip == 10003,]
Weight_10003
Weight_10003.T <- t(Weight_10003[,2:ncol(Weight_10003)])
Weight_10003_result <- loess(Weight_10003.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
P10003<-predict(Weight_10003_result, data.frame(year = seq(11, 12, 1)))
Weight_10003_new <- Weight[Weight$zip == 10003,]
Weight_10003_new
##############################
#10021: upper east side
Weight_10021 <- Weight_train[Weight_train$zip == 10021,]
Weight_10021
Weight_10021.T <- t(Weight_10021[,2:ncol(Weight_10021)])
Weight_10021_result <- loess(Weight_10021.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
P10021<-predict(Weight_10021_result, data.frame(year = seq(11, 12, 1)))
Weight_10021_new <- Weight[Weight$zip == 10021,]
Weight_10021_new
##############################
#10027:
Weight_10027 <- Weight_train[Weight_train$zip == 10027,]
Weight_10027
Weight_10027.T <- t(Weight_10027[,2:ncol(Weight_10027)])
Weight_10027_result <- loess(Weight_10027.T[1:10] ~ year, span = 0.8, control = loess.control(surface = "direct"))
P10027<-predict(Weight_10027_result, data.frame(year = seq(11, 12, 1)))
Weight_10027_new <- Weight[Weight$zip == 10027,]
Weight_10027_new
##############################
#10024:
Weight_10024 <- Weight_train[Weight_train$zip == 10024,]
Weight_10024
Weight_10024.T <- t(Weight_10024[,2:ncol(Weight_10024)])
Weight_10024_result <- loess(Weight_10024.T[1:10] ~ year, span = 0.8,  control = loess.control(surface = "direct"))
P10024<-predict(Weight_10024_result, data.frame(year = seq(11, 12, 1)))
Weight_10024_new <- Weight[Weight$zip == 10024,]
Weight_10024_new
Weight_new<-rbind(Weight_10025_new,Weight_11211_new,Weight_10027_new,Weight_10021_new,
Weight_10003_new,Weight_10024_new)
P<-rbind(P10003,P10021,P10024,P10025,P10027,P11211)
View(P)
10025<-predict(Weight_10025_result, data.frame(year = seq(11, 12, 1)))
10025<-predict(Weight_10025_result, data.frame(year = seq(11, 12, 1))
)
Weight_new<-as.data.table(rbind(Weight_10003_new,Weight_10021_new,Weight_10024_new,Weight_10025_new,
Weight_10027_new,Weight_11211_new))
View(Weight_new)
colnames(Weight_new)<-c(zip,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015)
colnames(Weight_new)<-c(zip,"2004","2005","2006","2007","2008","2009","2010","2011",
"2012","2013","2014","2015")
colnames(Weight_new)<-c("zip","2004","2005","2006","2007","2008","2009","2010","2011",
"2012","2013","2014","2015")
Weight_new<-as.data.table(rbind(Weight_10003_new,Weight_10021_new,Weight_10024_new,Weight_10025_new,
Weight_10027_new,Weight_11211_new))
colnames(Weight_new)<-c("zip","2004","2005","2006","2007","2008","2009","2010","2011",
"2012","2013","2014","2015")
colnames(P)<-c("2014","2015")
rownames(P)<-c("10003","10021","10024","10025","10027","10021")
P<-as.data.table(rbind(P10003,P10021,P10024,P10025,P10027,P11211))
colnames(P)<-c("2014","2015")
rownames(P)<-c("10003","10021","10024","10025","10027","10021")
colnames(Weight_new)<-c("zip","2004","2005","2006","2007","2008","2009","2010","2011",
"2012","2013","2014","2015")
P<-as.data.table(rbind(P10003,P10021,P10024,P10025,P10027,P11211))
colnames(P)<-c("2014","2015")
rownames(P)<-c("10003","10021","10024","10025","10027","11211")
P<-as.data.table(rbind(P10003,P10021,P10024,P10025,P10027,P11211))
View(P)
P<-as.data.frame(rbind(P10003,P10021,P10024,P10025,P10027,P11211))
View(P)
p<-data.frame(zip=c("10003","10021","10024","10025","10027","11211"),P)
View(P)
View(p)
P<-as.data.table(rbind(P10003,P10021,P10024,P10025,P10027,P11211))
P<-data.table(zip=c("10003","10021","10024","10025","10027","11211"),P)
View(p)
P<-as.data.table(rbind(P10003,P10021,P10024,P10025,P10027,P11211))
P<-data.table(zip=c("10003","10021","10024","10025","10027","11211"),P)
colnames(P)<-c("zip","2014","2015")
View(p)
View(P)
<center>
![](C:/Courseworks/STATW4701/Assignments/HW4/data/compliant_map1.png =1000x200)
![](C:/Courseworks/STATW4701/Assignments/HW4/data/compliant_map2.png)
</center>
